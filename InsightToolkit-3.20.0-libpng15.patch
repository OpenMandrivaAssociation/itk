Description: Add support for png 1.5
 This patch was made using git show 682f2e4 in the vtk tree
 as well as example.c from libpng 1.5
Author: Mathieu Malaterre <malat@debian.org>
Bug-Debian: http://bugs.debian.org/648136

--- insighttoolkit-3.20.1.orig/Code/IO/itkPNGImageIO.cxx
+++ insighttoolkit-3.20.1/Code/IO/itkPNGImageIO.cxx
@@ -25,22 +25,34 @@ namespace itk
 
 extern "C"
 {
+  void itkPNGWriteWarningFunction(png_structp png_ptr,
+                                  png_const_charp warning_msg)
+  {
+    PNG_CONST char *name = "UNKNOWN (ERROR!)";
+    char *test;
+    test = static_cast<char *>(png_get_error_ptr(png_ptr));
+
+    if (test == NULL)
+      fprintf(stderr, "%s: libpng warning: %s\n", name, warning_msg);
+
+    else
+      fprintf(stderr, "%s: libpng warning: %s\n", test, warning_msg);
+  }
+}
+
+extern "C"
+{
   #include <setjmp.h>
   /* The PNG library does not expect the error function to return.
      Therefore we must use this ugly longjmp call.  */
   void itkPNGWriteErrorFunction(png_structp png_ptr,
-                                png_const_charp itkNotUsed(error_msg))
+                                png_const_charp error_msg)
     {
+#if PNG_LIBPNG_VER >= 10400
+    itkPNGWriteWarningFunction(png_ptr, error_msg);
+#else
     longjmp(png_ptr->jmpbuf, 1);
-    }
-}
-
-
-extern "C"
-{
-  void itkPNGWriteWarningFunction(png_structp itkNotUsed(png_ptr),
-                                  png_const_charp itkNotUsed(warning_msg))
-    {
+#endif
     }
 }
 
@@ -211,7 +223,11 @@ void PNGImageIO::Read(void* buffer)
   // minimum of a byte per pixel
   if (colorType == PNG_COLOR_TYPE_GRAY && bitDepth < 8) 
     {
+#if PNG_LIBPNG_VER >= 10400
+    png_set_expand_gray_1_2_4_to_8(png_ptr);
+#else
     png_set_gray_1_2_4_to_8(png_ptr);
+#endif
     }
 
   // add alpha if any alpha found
@@ -227,9 +243,19 @@ void PNGImageIO::Read(void* buffer)
 #endif
     }
 
+#if PNG_LIBPNG_VER >= 10400
+  if (png_get_valid(png_ptr, info_ptr, PNG_INFO_sBIT))
+#else
   if (info_ptr->valid & PNG_INFO_sBIT)
+#endif
     {
+#if PNG_LIBPNG_VER >= 10400
+    png_color_8p sig_bit_p;
+    png_get_sBIT(png_ptr, info_ptr, &sig_bit_p);
+    png_set_shift(png_ptr, sig_bit_p);
+#else
     png_set_shift(png_ptr, &(info_ptr->sig_bit));
+#endif
     }
   // have libpng handle interlacing
   //int number_of_passes = png_set_interlace_handling(png_ptr);
@@ -346,7 +372,11 @@ void PNGImageIO::ReadImageInformation()
   // minimum of a byte per pixel
   if (colorType == PNG_COLOR_TYPE_GRAY && bitDepth < 8) 
     {
+#if PNG_LIBPNG_VER >= 10400
+    png_set_expand_gray_1_2_4_to_8(png_ptr);
+#else
     png_set_gray_1_2_4_to_8(png_ptr);
+#endif
     }
 
   // add alpha if any alpha found
@@ -496,7 +526,7 @@ void PNGImageIO::WriteSlice(const std::s
 #if !defined(_MSC_VER) || _MSC_VER != 1310
   png_set_error_fn(png_ptr, png_ptr,
                    itkPNGWriteErrorFunction, itkPNGWriteWarningFunction);
-  if (setjmp(png_ptr->jmpbuf))
+  if (setjmp(png_jmpbuf((png_ptr))))
     {
     fclose(fp);
     itkExceptionMacro("Error while writing Slice to file: "
